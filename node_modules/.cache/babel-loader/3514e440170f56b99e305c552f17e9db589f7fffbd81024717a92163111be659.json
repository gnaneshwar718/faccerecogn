{"ast":null,"code":"import * as faceapi from 'face-api.js';\n\n// Function to load emotion recognition model\nexport const loadEmotionRecognitionModel = async () => {\n  await faceapi.nets.faceExpressionNet.loadFromUri('/models');\n};\n\n// Function to detect emotions from a face\nexport const detectEmotions = async input => {\n  const detections = await faceapi.detectAllFaces(input, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n  return detections;\n};\n\n// Function to get the dominant emotion from detected emotions\nexport const getDominantEmotion = expressions => {\n  let dominantEmotion = '';\n  let maxProbability = 0;\n  for (const [emotion, probability] of Object.entries(expressions)) {\n    if (probability > maxProbability) {\n      dominantEmotion = emotion;\n      maxProbability = probability;\n    }\n  }\n  return dominantEmotion;\n};","map":{"version":3,"names":["faceapi","loadEmotionRecognitionModel","nets","faceExpressionNet","loadFromUri","detectEmotions","input","detections","detectAllFaces","TinyFaceDetectorOptions","withFaceLandmarks","withFaceExpressions","getDominantEmotion","expressions","dominantEmotion","maxProbability","emotion","probability","Object","entries"],"sources":["C:/Users/NNN/Desktop/New folder/face recogniser/webcam-facial-recognition/src/utils/emotionRecognition.ts"],"sourcesContent":["import * as faceapi from 'face-api.js';\r\n\r\n// Function to load emotion recognition model\r\nexport const loadEmotionRecognitionModel = async () => {\r\n    await faceapi.nets.faceExpressionNet.loadFromUri('/models');\r\n};\r\n\r\n// Function to detect emotions from a face\r\nexport const detectEmotions = async (input: HTMLImageElement | HTMLVideoElement) => {\r\n    const detections = await faceapi.detectAllFaces(\r\n        input,\r\n        new faceapi.TinyFaceDetectorOptions()\r\n    ).withFaceLandmarks().withFaceExpressions();\r\n\r\n    return detections;\r\n};\r\n\r\n// Function to get the dominant emotion from detected emotions\r\nexport const getDominantEmotion = (expressions: faceapi.FaceExpressions) => {\r\n    let dominantEmotion = '';\r\n    let maxProbability = 0;\r\n\r\n    for (const [emotion, probability] of Object.entries(expressions)) {\r\n        if (probability > maxProbability) {\r\n            dominantEmotion = emotion;\r\n            maxProbability = probability;\r\n        }\r\n    }\r\n\r\n    return dominantEmotion;\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,aAAa;;AAEtC;AACA,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EACnD,MAAMD,OAAO,CAACE,IAAI,CAACC,iBAAiB,CAACC,WAAW,CAAC,SAAS,CAAC;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAA0C,IAAK;EAChF,MAAMC,UAAU,GAAG,MAAMP,OAAO,CAACQ,cAAc,CAC3CF,KAAK,EACL,IAAIN,OAAO,CAACS,uBAAuB,CAAC,CACxC,CAAC,CAACC,iBAAiB,CAAC,CAAC,CAACC,mBAAmB,CAAC,CAAC;EAE3C,OAAOJ,UAAU;AACrB,CAAC;;AAED;AACA,OAAO,MAAMK,kBAAkB,GAAIC,WAAoC,IAAK;EACxE,IAAIC,eAAe,GAAG,EAAE;EACxB,IAAIC,cAAc,GAAG,CAAC;EAEtB,KAAK,MAAM,CAACC,OAAO,EAAEC,WAAW,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,WAAW,CAAC,EAAE;IAC9D,IAAII,WAAW,GAAGF,cAAc,EAAE;MAC9BD,eAAe,GAAGE,OAAO;MACzBD,cAAc,GAAGE,WAAW;IAChC;EACJ;EAEA,OAAOH,eAAe;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
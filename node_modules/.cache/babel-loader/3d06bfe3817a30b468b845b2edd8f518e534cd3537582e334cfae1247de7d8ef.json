{"ast":null,"code":"import*as faceapi from'face-api.js';// Function to load emotion recognition model\nexport const loadEmotionRecognitionModel=async()=>{await faceapi.nets.faceExpressionNet.loadFromUri('/models');};// Function to detect emotions from a face\nexport const detectEmotions=async input=>{const detections=await faceapi.detectAllFaces(input,new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();return detections;};// Function to get the dominant emotion from detected emotions\nexport const getDominantEmotion=expressions=>{let dominantEmotion='';let maxProbability=0;for(const[emotion,probability]of Object.entries(expressions)){if(probability>maxProbability){dominantEmotion=emotion;maxProbability=probability;}}return dominantEmotion;};","map":{"version":3,"names":["faceapi","loadEmotionRecognitionModel","nets","faceExpressionNet","loadFromUri","detectEmotions","input","detections","detectAllFaces","TinyFaceDetectorOptions","withFaceLandmarks","withFaceExpressions","getDominantEmotion","expressions","dominantEmotion","maxProbability","emotion","probability","Object","entries"],"sources":["C:/Users/NNN/Desktop/New folder/face recogniser/webcam-facial-recognition/src/utils/emotionRecognition.ts"],"sourcesContent":["import * as faceapi from 'face-api.js';\r\n\r\n// Function to load emotion recognition model\r\nexport const loadEmotionRecognitionModel = async () => {\r\n    await faceapi.nets.faceExpressionNet.loadFromUri('/models');\r\n};\r\n\r\n// Function to detect emotions from a face\r\nexport const detectEmotions = async (input: HTMLImageElement | HTMLVideoElement) => {\r\n    const detections = await faceapi.detectAllFaces(\r\n        input,\r\n        new faceapi.TinyFaceDetectorOptions()\r\n    ).withFaceLandmarks().withFaceExpressions();\r\n\r\n    return detections;\r\n};\r\n\r\n// Function to get the dominant emotion from detected emotions\r\nexport const getDominantEmotion = (expressions: faceapi.FaceExpressions) => {\r\n    let dominantEmotion = '';\r\n    let maxProbability = 0;\r\n\r\n    for (const [emotion, probability] of Object.entries(expressions)) {\r\n        if (probability > maxProbability) {\r\n            dominantEmotion = emotion;\r\n            maxProbability = probability;\r\n        }\r\n    }\r\n\r\n    return dominantEmotion;\r\n};\r\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,OAAO,KAAM,aAAa,CAEtC;AACA,MAAO,MAAM,CAAAC,2BAA2B,CAAG,KAAAA,CAAA,GAAY,CACnD,KAAM,CAAAD,OAAO,CAACE,IAAI,CAACC,iBAAiB,CAACC,WAAW,CAAC,SAAS,CAAC,CAC/D,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAO,CAAAC,KAA0C,EAAK,CAChF,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAP,OAAO,CAACQ,cAAc,CAC3CF,KAAK,CACL,GAAI,CAAAN,OAAO,CAACS,uBAAuB,CAAC,CACxC,CAAC,CAACC,iBAAiB,CAAC,CAAC,CAACC,mBAAmB,CAAC,CAAC,CAE3C,MAAO,CAAAJ,UAAU,CACrB,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,kBAAkB,CAAIC,WAAoC,EAAK,CACxE,GAAI,CAAAC,eAAe,CAAG,EAAE,CACxB,GAAI,CAAAC,cAAc,CAAG,CAAC,CAEtB,IAAK,KAAM,CAACC,OAAO,CAAEC,WAAW,CAAC,EAAI,CAAAC,MAAM,CAACC,OAAO,CAACN,WAAW,CAAC,CAAE,CAC9D,GAAII,WAAW,CAAGF,cAAc,CAAE,CAC9BD,eAAe,CAAGE,OAAO,CACzBD,cAAc,CAAGE,WAAW,CAChC,CACJ,CAEA,MAAO,CAAAH,eAAe,CAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
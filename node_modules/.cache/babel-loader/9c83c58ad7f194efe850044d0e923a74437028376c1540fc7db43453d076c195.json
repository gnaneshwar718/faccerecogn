{"ast":null,"code":"import React,{useRef,useEffect,useState}from'react';import Webcam from'react-webcam';import*as faceapi from'face-api.js';import{loadFaceRecognitionModels,detectFaces}from'../utils/faceRecognition';import{loadEmotionRecognitionModel,detectEmotions,getDominantEmotion}from'../utils/emotionRecognition';import{Box,Button,Typography,Card,CardContent,Container}from'@mui/material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WebcamFeed=()=>{const webcamRef=useRef(null);const canvasRef=useRef(null);const fileInputRef=useRef(null);const[isWebcamOn,setIsWebcamOn]=useState(false);useEffect(()=>{const loadModels=async()=>{await loadFaceRecognitionModels();await loadEmotionRecognitionModel();};loadModels();},[]);const startWebcam=()=>{setIsWebcamOn(true);};const stopWebcam=()=>{setIsWebcamOn(false);if(canvasRef.current){const context=canvasRef.current.getContext('2d');if(context){context.clearRect(0,0,canvasRef.current.width,canvasRef.current.height);}}};const captureAndDetect=async()=>{if(webcamRef.current&&canvasRef.current){const video=webcamRef.current.video;if(video&&video.readyState===4){// Ensure video is ready\nconst displaySize={width:video.videoWidth,height:video.videoHeight};faceapi.matchDimensions(canvasRef.current,displaySize);// Capture image from webcam\nconst screenshot=webcamRef.current.getScreenshot();if(screenshot){// Convert data URL to Image object\nconst img=new Image();img.src=screenshot;img.onload=async()=>{// Detect faces and emotions from the captured image\nconst faces=await detectFaces(img);const emotions=await detectEmotions(img);const resizedDetections=faceapi.resizeResults(faces,displaySize);const canvas=canvasRef.current;if(canvas){const context=canvas.getContext('2d');if(context){context.clearRect(0,0,displaySize.width,displaySize.height);context.drawImage(img,0,0,displaySize.width,displaySize.height);// Draw the captured image\nfaceapi.draw.drawDetections(canvas,resizedDetections);faceapi.draw.drawFaceLandmarks(canvas,resizedDetections);resizedDetections.forEach((detection,i)=>{var _emotions$i;const{age,gender,genderProbability}=detection;const dominantEmotion=getDominantEmotion(((_emotions$i=emotions[i])===null||_emotions$i===void 0?void 0:_emotions$i.expressions)||{});const text=[`Age: ${Math.round(age)}`,`Gender: ${gender} (${(genderProbability*100).toFixed(2)}%)`,`Emotion: ${dominantEmotion}`].join(', ');const box=detection.detection.box;context.fillStyle='#fff';context.font='14px Arial';// Reduced font size\ncontext.fillText(text,box.x,box.y+box.height+20);// Moved text down\n});}}};}}}};const handleImageUpload=async event=>{if(event.target.files&&event.target.files.length>0){const file=event.target.files[0];if(file&&canvasRef.current){const img=await faceapi.bufferToImage(file);const faces=await detectFaces(img);const emotions=await detectEmotions(img);const displaySize={width:img.width,height:img.height};faceapi.matchDimensions(canvasRef.current,displaySize);const resizedDetections=faceapi.resizeResults(faces,displaySize);const canvas=canvasRef.current;if(canvas){const context=canvas.getContext('2d');if(context){context.clearRect(0,0,displaySize.width,displaySize.height);context.drawImage(img,0,0,displaySize.width,displaySize.height);// Draw the uploaded image\nfaceapi.draw.drawDetections(canvas,resizedDetections);faceapi.draw.drawFaceLandmarks(canvas,resizedDetections);resizedDetections.forEach((detection,i)=>{var _emotions$i2;const{age,gender,genderProbability}=detection;const dominantEmotion=getDominantEmotion(((_emotions$i2=emotions[i])===null||_emotions$i2===void 0?void 0:_emotions$i2.expressions)||{});const text=[`Age: ${Math.round(age)}`,`Gender: ${gender} (${(genderProbability*100).toFixed(2)}%)`,`Emotion: ${dominantEmotion}`].join(', ');const box=detection.detection.box;context.fillStyle='#fff';context.font='14px Arial';// Reduced font size\ncontext.fillText(text,box.x,box.y+box.height+20);// Moved text down\n});}}}}};const handleButtonClick=()=>{if(fileInputRef.current){fileInputRef.current.click();}};return/*#__PURE__*/_jsxs(Container,{maxWidth:\"md\",sx:{py:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",align:\"center\",gutterBottom:true,children:\"WEBCAM IMAGE FEED WITH FACIAL RECOGNITION\"}),/*#__PURE__*/_jsx(Card,{sx:{width:'85%',margin:'auto'},children:/*#__PURE__*/_jsxs(CardContent,{sx:{display:'flex',flexDirection:'column',alignItems:'center'},children:[/*#__PURE__*/_jsxs(Box,{sx:{position:'relative',width:'100%',paddingTop:'75%',overflow:'hidden',marginBottom:2},children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",ref:fileInputRef,onChange:handleImageUpload,style:{display:'none'}}),isWebcamOn&&/*#__PURE__*/_jsx(Webcam,{audio:false,ref:webcamRef,screenshotFormat:\"image/jpeg\",videoConstraints:{width:580,height:420,facingMode:'user'},style:{position:'absolute',top:0,left:0,width:'100%',height:'100%'}}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%'}})]}),/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"center\",gap:2,flexWrap:\"wrap\",children:[/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:captureAndDetect,disabled:!isWebcamOn,children:\"Capture & Detect Faces & Emotions\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:startWebcam,disabled:isWebcamOn,children:\"Start Webcam\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"error\",onClick:stopWebcam,disabled:!isWebcamOn,children:\"Stop Webcam\"}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"secondary\",onClick:handleButtonClick,children:\"Upload Image\"})]})]})})]});};export default WebcamFeed;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}